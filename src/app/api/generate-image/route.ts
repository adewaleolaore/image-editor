import { GoogleGenerativeAI } from '@google/generative-ai';
import { NextRequest, NextResponse } from 'next/server';

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);

export async function POST(request: NextRequest) {
  try {
    if (!process.env.GEMINI_API_KEY) {
      console.error('GEMINI_API_KEY environment variable not set');
      return NextResponse.json(
        { error: 'Gemini API key not configured. Please check your .env.local file.' },
        { status: 500 }
      );
    }
    
    console.log('Processing image generation request...');
    console.log('API Key configured:', process.env.GEMINI_API_KEY ? 'Yes' : 'No');

    const body = await request.json();
    const { prompt } = body;

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required for image generation' },
        { status: 400 }
      );
    }

    // Try different model names for image generation
    const modelNames = [
      'gemini-2.5-flash-image-preview',
      'gemini-2.0-flash-exp', 
      'gemini-1.5-pro-002'
    ];
    
    let model;
    let lastError;
    
    // Try to initialize the model with different names
    for (const modelName of modelNames) {
      try {
        console.log(`Trying model: ${modelName}`);
        model = genAI.getGenerativeModel({
          model: modelName,
          generationConfig: {
            temperature: 0.7, // Balanced creativity
            topP: 0.9,
            topK: 40
          },
          systemInstruction: "You are an expert YouTube thumbnail generator. Always create wide angle images in landscape/horizontal format. Generate widescreen thumbnails that are perfect for YouTube."
        });
        
        console.log(`Model ${modelName} initialized successfully`);
        break;
      } catch (error) {
        console.log(`Model ${modelName} failed:`, error);
        lastError = error;
        continue;
      }
    }
    
    if (!model) {
      return NextResponse.json(
        { 
          error: 'No suitable model available for image generation',
          details: lastError instanceof Error ? lastError.message : 'All models failed to initialize'
        },
        { status: 503 }
      );
    }

    // Create the content for image generation requesting wide angle format
    const content = `Generate a wide angle YouTube thumbnail image based on this description: "${prompt}". 

    Create a high-quality, eye-catching thumbnail that would be perfect for YouTube:
    - Use wide angle format (horizontal/landscape orientation)
    - Design as a widescreen image
    - Vibrant, engaging colors that pop on YouTube
    - Bold, readable text if appropriate (large enough to read on mobile)
    - High contrast and visual impact for small preview sizes
    - Professional YouTube thumbnail style
    - Eye-catching composition that drives clicks
    
    Generate the wide angle thumbnail image directly.`;

    // Generate the response
    const response = await model.generateContent(content);
    
    // Extract images and text from the response
    const result = response.response;
    const parts = result.candidates?.[0]?.content?.parts || [];
    
    let generatedImageBase64 = null;
    let responseText = '';

    for (const part of parts) {
      if (part.text) {
        responseText += part.text;
      } else if (part.inlineData) {
        generatedImageBase64 = part.inlineData.data;
      }
    }

    if (!generatedImageBase64) {
      return NextResponse.json(
        { error: 'No image was generated by the AI model. The model may not support image generation for this request.' },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      generatedImage: `data:image/png;base64,${generatedImageBase64}`,
      responseText: responseText,
      message: 'Image generated successfully'
    });

  } catch (error) {
    console.error('Error generating image:', error);
    
    // Handle specific Google AI errors
    if (error instanceof Error) {
      if (error.message.includes('429') || error.message.includes('quota')) {
        return NextResponse.json(
          { 
            error: 'API quota exceeded. Please wait a moment and try again, or check your Gemini API billing settings.',
            details: 'You may have hit the free tier limits. Consider upgrading your Google AI plan.'
          },
          { status: 429 }
        );
      }
      
      if (error.message.includes('401') || error.message.includes('API key')) {
        return NextResponse.json(
          { 
            error: 'Invalid API key. Please check your Gemini API key configuration.',
            details: 'Make sure your GEMINI_API_KEY is correct in the .env.local file'
          },
          { status: 401 }
        );
      }
      
      if (error.message.includes('model')) {
        return NextResponse.json(
          { 
            error: 'Model not available. The Gemini image model may not be accessible.',
            details: 'Try again later or check if the model name is correct'
          },
          { status: 503 }
        );
      }
    }
    
    return NextResponse.json(
      { 
        error: 'Failed to generate image',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}